This is a HowTo, which desribes the steps you have to do to create the partial reconfigurable 
hardware design for the protocol graph demo.

The system design looks like this:

  -------------------------------------------------------
 |                                                       |
 |    ------------------           ------------------    |
  --> | NoC Switch | 1 |  -------> | NoC Switch | 0 | ---
      ------------------           ------------------
           /        \                 /         \
       -------   -------           -------   ========
       | ETH |   | H2S |           | S2H |   || PR || <---- partial reconfigurable (PR) slot
       -------   -------           -------   ======== 

We have four functional blocks (FB) in hardware, which are connected with each other 
over a network-on-chip.

(1) the 'ETH' FB is connected to the physical network interface (Phy) of the FPGA. 
    It receives packets from the Phy and transmits packets to the Phy
(2) the 'H2S' FB forwards packets from the hardware network-on-chip to the software
    The software runs on a Xilinx MicroBlaze soft-core CPU that runs Linux 2.6 and 
    some kernel modules (such as libreconos.ko and pr_hw_sw_interface.ko)
(3) the 'S2H' FB receives packets from the software and inserts them to the network-on-chip
(4) the 'PR' slot is the only partial reconfigurable slot/module in our design. 
    In this demo we can either configure the 'PR_a' or the 'PR_b' FB to this slot. 
    The 'PR_a' FB overwrites the payload of each incoming packet with '0A', the 'PR_b' FB 
    overwrites the payload of each incoming packet with '0B'.

-----------------------------------------------------------------------------------------------

For our demo we require the following four bitstreams:

[1] system_a.bit:  full bitstream, where 'PR_a' is configured into the 'PR' slot (configuration A)
[2] system_b.bit:  full bitstream, where 'PR_b' is configured into the 'PR' slot (configuration B)
[3] partial_a.bit: partial bitstream for the 'PR_a' FB
[4] partial_b.bit: partial bitstream for the 'PR_b' FB

-----------------------------------------------------------------------------------------------

To generate these bitstreams you have to follow these steps:

STEP 1: Generate static and partial netlists for configuration A
================================================================
- Install the Xilinx 14.4 tools to your system (if this is not already the case)
- Open 'hw/edk/system.xmp' using the Xilinx Platform Studio (XPS) and click on 'Hardware>Generate Hardware'
- Important: You can stop this process, when XPS starts the mapping process. (We only need the netlists!)

STEP 2: Copy static and partial netlists to the 'hw/prdesign'
=============================================================
- Copy all netlists (*.ngc) from the folder 'hw/edk/implementation' to 'hw/prdesign/syn/static'
- Move the partial netlist 'system_hwt_pr_0_wrapper.ngc' from 'hw/prdesign/syn/static' to 'hw/prdesign/syn/pr_a'

STEP 3: Generate partial netlists for configuration B
=====================================================
- Open 'hw/edk/system.xmp' using the Xilinx Platform Studio (XPS) and click on 'Hardware>Clean Hardware'
- Open the file 'hw/edk/pcores/hwt_pr_v1_00_a/hdl/vhdl/hwt_pr.vhd' wit a text editor and change the following line
  old: 'constant PR_MODULE  : std_logic_vector(7 downto 0) := X"0A";' (line 56)
  new: 'constant PR_MODULE  : std_logic_vector(7 downto 0) := X"0B";'
- In XPS: click 'Hardware>Generate Hardware'
- Important: You can stop this process, when XPS starts the mapping process. (We only need the partial netlist/s!)

STEP 4: Copy partial netlist/s to the 'hw/prdesign'
===================================================
- Copy the partial netlist 'system_hwt_pr_0_wrapper.ngc' from the folder 'hw/edk/implementation' to 'hw/prdesign/syn/pr_b'

STEP 5: Generate bitstreams for configuration A
================================================
- goto the folder 'hw/prdesign/imp/config_pr_a' and call './generate_config.sh'
- this step will create the full bistream 'system.bit' and the partial bitstream for configuration A 
- copy the full bitstream 'hw/prdesign/imp/config_pr_a/system.bit' to 'hw/prdesign/bitfiles/system_a.bit'
- copy the partial bitstream 'hw/prdesign/imp/config_pr_a/system_hwt_pr_0_hwt_pr_a_partial.bin' 
  to 'hw/prdesign/bitfiles/partial_a.bit' (important: the file *.bin contains the partial bitstream without a header)

STEP 6: Generate bitstreams for configuration B
================================================
- goto the folder 'hw/prdesign/imp/config_pr_b' and call './generate_config.sh'
- this step will create the full bistream 'system.bit' and the partial bitstream for configuration B 
- copy the full bitstream 'hw/prdesign/imp/config_pr_b/system.bit' to 'hw/prdesign/bitfiles/system_b.bit'
- copy the partial bitstream 'hw/prdesign/imp/config_pr_b/system_hwt_pr_0_hwt_pr_b_partial.bin' 
  to 'hw/prdesign/bitfiles/partial_b.bit' (important: the file *.bin contains the partial bitstream without a header)

STEP 7: Build the software
==========================
- go to the /sw folder (cd ../sw) and generate the kernel-module and the send_pkts application (using make)
- copy the kernel module 'pr_hw_sw_interface.ko' to the compact flash card, 
  which should already contain the current libreconos.ko, fsl.ko, etc. 

STEP 8: Configure the FPGA and download the kernel image
========================================================
- download the system_a.bit or "system_b.bit" using Xilinx Impact or the 'dow' script
- download the Linux kernel image ('simpleImage.noc') using the 'xmd' tool or the 'dow' script

STEP 9: Test the system
=======================
- open minicom in a terminal (e.g. 'minicom -D /dev/ttyUSB0')
- configure the protocol graph demo according to the file 'sw/config.sh' (line 2-3)
- the kernel module first wait for a message from the network interface
  -> call the 'sw/send_pkts/send_pkts' application on your workstation 
     to send a single packet over the eth1 interface to the FPGA
- then you have 20 seconds to reconfigure the partial slot ('[partial slot] reconfig. START')
  -> first hit the 'enter'-key such that you go back to the terminal
  -> in the terminal you can now download a partial bitstream
     =>> for pr_a: 'cat partial_bitstreams/partial_a.bit > /dev/icap0')
     =>> for pr_b: 'cat partial_bitstreams/partial_b.bit > /dev/icap0')
- after 20 seconds, you should not reconfigure anymore, this is indicated by the output '[partial slot] reconfig. STOP'
  -> the kernel module will again wait for another message (that could be send using sw/send_pkts/send_pkts)
- and so on and so on...

