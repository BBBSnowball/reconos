                                                       ____  _____
                           ________  _________  ____  / __ \/ ___/
                          / ___/ _ \/ ___/ __ \/ __ \/ / / /\__ \
                         / /  /  __/ /__/ /_/ / / / / /_/ /___/ /
                        /_/   \___/\___/\____/_/ /_/\____//____/

======================================================================

  title:        Setup of ReconOS

  project:      ReconOS
  author:       Christoph Rüthing, University of Paderborn
  description:  This is an introduction to linux on Zynq as the base
                operating system of ReconOS.
                It describes some general aspects of the Zynq platform
                and how to setup linux.

  History
  Date     | Rev | Author        | What
  ---------+-----+---------------+------------------------
  19.04.13 | 1.0 | C. Rüthing    | Initial Version
  ---------+-----+---------------+------------------------

======================================================================

1. Introduction

ReconOS depends on an existing operating system. This section gives
a brief introduction to the Zynq platform and describes how to setup
linux. As the past has shown, most of the problems in the setup
process were originated in setting up linux so you should read this
guide carefully.


2. Linux on Zynq

2.1 Zynq platform

The Zynq platform combines an arm processor with an FPGA on a single
SoC. The arm processor together with some additional controllers
constitutes the processing system (PS) which can be used completely
independent from the FPGA. For a deeper understanding of the
architecture you should take a look at the Zynq-Documentation
(the Technical Reference Manual (UG585) includes everything you want
to know about) and the Zynq-page in XPS (the green boxes are
configurable).

2.2 Bootsequence of the PS

To setup Linux on the Zynq you should understand how the boot sequence
works. There are different boot-modes, but there are mainly two
conceptionally different ones:

JTAG-boot:
+------+    +---------------+    +------------+    +--------------+
| Boot | -> | Processor     | -> | Initialize | -> | Download and |
| ROM  |    | runs bootloop |    | PS         |    | run elf      |
+------+    +---------------+    +------------+    +--------------+

The Processor runs a bootloop until it is interrupted via jtag and an
executable is downloaded. The initialization configures the multiplexed
IO (MIO), the DDR-Controller, ... and can be done in xmd by executing
ps7_init. The related ps7_init.tcl is generated by xps according to the
configuration of the PS.

Other boot-modes:
+------+    +----------------+    +--------------+
| Boot | -> | Load and run   | -> | Load and run |
| ROM  |    | fsbl (Init PS) |    | elf          |
+------+    +----------------+    +--------------+

The Boot-ROM loads the First-Statge-Bootloader (fsbl) from SD-Card or
other another memory and executes it. The fsbl does the initialization
of the PS (ps7_init) and can be generated with the SDK.

In both boot-modes the last stage elf will be u-boot to run the linux
kernel. For development with ReconOS we will use the JTAG-boot-mode.

The boot-modes can be configured by setting the appropriate jumpers.
Just take a look into your board-description to figure out, how to
set them correctly.

2.3 U-Boot

To boot linux you first need a bootloader which will be u-boot for know.
To build u-boot only a couple of steps are needed:
  - download u-boot (git.xilix.com/u-boot-xlnx)
  - configure u-boot (see below)
  - compile u-boot by make zynq_<board>_config && make

The configuration of u-boot is done by editing include/configs/zynq_common.h
You can adjust this file per your desires but the following configuration
is recommended.
  - adjust ip-addresses if you want to load the kernel via TFTP
  - adjust default-boot configuration in EXTRA_ENV_SETTING
  - set BOOTDELAY to 0

You must decide if you want u-boot to load the kernel image and the
device-tree via TFTP or if you want to downlad them via JTAG.
TFTP is much faster than JTAG but requires a TFTP-Server.

TFTP-Configuration:
Export your kernel image and device-tree-blob via tftp.

"jtagboot=echo TFTPing Linux to RAM...;" \
         "tftp 0x3000000 ${kernel_image};" \
         "tftp 0x2A00000 ${devicetree_image};" \
         "bootm 0x3000000 - 0x2A00000\0"

JTAG-Configuration:
Download kernel image and device-tree-blob via jtag into memory at
addresses 0x3000000 and 0x2A00000.

"jtagboot=echo Booting Linux from RAM...;" \
         "bootm 0x3000000 - 0x2A00000\0"

2.4 Device-Tree

To boot Linux you also need a device-tree. Because the Processing
System is more or less fixed we do not need a device-tree-Generator.
Just use the standard device-tree provided in the Linux sources and
delete the peripheral you have turned of.
Then you can compile the devic-tree by usinge the device-tree-compile
included in the kernel tree:
scripts/dtc/dtc -I dts -O dtb -o device-tree.dtb device-tree.dts

2.5 Kernel Source, Configuration and Compilation

Now you can download the Linux kernel sources. Because the vanilla
kernel from kernel.org does not include all needed drivers yet you
should use the kernel provided by Xilinx (linux-xlnx). In the future
these drivers should be also available in the kernel source tree.

To run on Zynq the kernel needs to be configured correctly. As a
starting point you can either use the default config included in the
kernel or the reduced .config in the ReconOS repository. Just play
around with the different kernel options.

To compile linux you need your cross compilers and also u-boot,
especially mkimage to create the uImage.

2.6 The root filesystem

Besides the kernel you also need to build your own root filesystem. It
can be mountet from different locations - we will use nfs for this,
because it offers the highest flexibility for development.

You can either build your own root filesystem or use the one provided
in the repository. If you do not create your own one consider that you
eventually have to insert your own shared libraries.
Building your own root filesystem is also not complicated:
  - download and compile busybox (git.busybox.net/busybox)
  - create directories (dev etc etc/init.d mnt opt proc root sys tmp var)
  - create /etc/fstab, /etc/inittab and /etc/init.d/rcS (see example)
  - create device-files in dev (see example)


2.7 Step-By-Step Guide

The following sections provide a sketchy step-by-step guide for
different tasks. Consider, that the different parts may have
dependencies you have to take care on your own.
These steps depends on a properly configured environment with cross
compilers, ...

4.7.1 Compile U-Boot

Checkout u-boot sources
$> git clone git://git.xilinx.com/u-boot-xlnx.git

Adjust the configuration files as described above
$> vim include/configs/...

Compile u-boot
$> make zynq_<board>_config
$> make

4.7.2 Compiling Linux

Checkout kernel sources
$> git clone git://git.xilinx.com/linux-xlnx.git

Create .config file out of defconfig or example
$> make xilinx_zynq_defconfig && make menuconfig
or
$> cp $RECONOS/.../.config .

Compile kernel (mkimage needed)
$> make -j8 uImage
