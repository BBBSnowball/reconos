//////////////////////////////////////////////////////////////////////////////

               timedb - keeping track of your time series

\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
                                                       _____
 timedb is a lightweight, high-precision,           _.'_____`._
 high-performance round-robin time                .'.-'  12 `-.`.
 series database, especially suited for          /,' 11      1 `.\
 embedded devices.                              // 10      /   2 \\
                                               ;;         /       ::
Yet another time series database? Why          || 9  ----O      3 ||
not RRDtool? While RRD's idea seems good       ::                 ;;
its realization heavily sucks, seriously!       \\ 8           4 //
The minimal update interval is 1 second,         \`. 7       5 ,'/
the API is a nightmare (in C, one needs to        '.`-.__6__.-'.'
concatenate strings that contain the values        ((-._____.-))
for storing and the library routine                _))       ((_
processes that as the argc/argv in a main         '--'       '--'
program ... WTF?) and it does not seem
suited for high-performance. The internal storage format has no concrete
specification and is quite intransparent. Reverse-engineering the rrdtool
might rather be a waste of time. Its internal data compression might also
not always be desired.

Ideally, there is a specification that is easy, simple and independent from
the actual implementation. Just like the Pcap file format. Then, this could
also be used for lightweight implementations on embedded devices (without
having library dependencies). This is where timedb comes in by offering exactly
that! A reference implementation is available in the src folder for usage
with cmdline. The storage format is specified in src/timedb.h.

Benefits are:
 * High-performance
 * High-precision (in data [float64_t] and time [minimum interval: 1 us])
 * Static database size over time (round robin)
 * Transparent database layout
 * Implementation possible without libraries
 * Standard format for all timedbs

Example:
 $ timedb_create foo.tdb 1000 10 2  # interval:1000us, blocks:10, cells:2
 $ timedb_dump foo.tdb
 $ timedb_update foo.tdb 3.0 5.0 # in O(1)
 $ ...
 $ timedb_dump foo.tdb
 $ timedb_get foo.tdb 0          # in O(1); get latest block
 $ timedb_get foo.tdb 1          # get block before that
 $ timedb_get foo.tdb 0-5        # get last 5 blocks
 $ timedb_get foo.tdb 0-5,7
 $ timedb_export foo.tdb

Note that it is not guaranteed that a timedb database is portable between
architectures. timedb is an Open Source project covered by the GNU General
Public License. It is used in applications such as sensord [2], for instance.

[1] https://github.com/gnumaniacs/timedb
[2] https://github.com/gnumaniacs/sensord
