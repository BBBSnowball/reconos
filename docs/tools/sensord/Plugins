The layout of a simple kernel-like plugin can be found in dummy.c. They need to
include the "sensord.h" header file. Plugins may not use printf and similar, but
shall rather use printp, which will print to the syslog daemon.

Each plugins has an init and exit function they need to publicize with
plugin_init() and plugin_exit() macros. Implementing functions can be
static, but they need to be marked with an __init or __exit attribute.

Then, as in kernel modules, there are three optional macros PLUGIN_LICENSE,
PLUGIN_AUTHOR and PLUGIN_DESC. They will be removed by the preprocessor. Thus,
they are only for the purpose to provide some information to the developer.
PLUGIN_LICENSE may contain a license such as GPL. PLUGIN_AUTHOR states the
author of a plugin. If there are multiple authors, then there can be multiple
lines with a PLUGIN_AUTHOR statement. PLUGIN_DESC shall provide a minimal
description what this plugin is about.

sensord.h exports several functions and structures that need to be used in the
plugin code. 'struct plugin_instance' defines a particular instance of your
plugin code. Hence, you can register multiple instances if you like. The example
below shows necessary filled out information. 'cells_per_block' defines how many
floating point values need to be stored per fetch. 'block_entries' states how
big the floating window shall be that stores historical blocks. By 'schedule_int'
the plugin defines in which intervals the plugin's fetch function has to be
triggered. 'fetch' is a pointer to the plugin's fetch function e.g. dummy_fetch.
This function is responsible to fill out self->cells with the stated number of
cells in 'cells_per_block'. self->cells has to be allocated during the init
process and freed during the cleanup. The 'name' component will be used for
creating the plugin's timedb database under /opt/sensord/database/.

/*...*/

#include "sensord.h"

static void dummy_fetch(struct plugin_instance *self)
{
	int i;
	for (i = 0; i < self->cells_per_block; ++i) {
		self->cells[i] = 1.0;
	}
}

struct plugin_instance dummy_plugin = {
	.name			=	"dummy-test",
	.basename		=	"dummy",
	.fetch			=	dummy_fetch,
	.schedule_int		=	TIME_IN_SEC(1),
	.block_entries		=	1000000,
	.cells_per_block	=	2,
};

static __init int dummy_init(void)
{
	struct plugin_instance *pi = &dummy_plugin;
	pi->cells = malloc(pi->cells_per_block * sizeof(double));
	assert(pi->cells);
	return register_plugin_instance(pi);
}

static __exit void dummy_exit(void)
{
	struct plugin_instance *pi = &dummy_plugin;
	free(pi->cells);
	unregister_plugin_instance(pi);
}

plugin_init(dummy_init);
plugin_exit(dummy_exit);

PLUGIN_LICENSE("GPL");
PLUGIN_AUTHOR("Daniel Borkmann <daniel.borkmann@tik.ee.ethz.ch>");
PLUGIN_DESC("A simple dummy sensord plugin");
