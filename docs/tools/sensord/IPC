Clients that would like to interact with sensord can make use of its IPC
facilities. Three techniques are applied: Unix domain sockets, signals and
shared memory.

A client can request that it wishes to be notified if a given upper or lower
threshold has been passed. The request is done via Unix domain sockets and the
notification by the sensord in case of threshold-passing via signals with
information about the plugin in a shared memory.

A client can request that it wishes to know the last-n (where 0<=n<blocksize)
block from the database. The request is done via Unix domain sockets with an
immediate response via Unix domain sockets.

builtin_client.c gives an example of all of the mentioned methods.

The header file 'notification.h' needs to be included for implementing clients.

Theshold handlers can the be registered via (where SIGUSR1 and SIGUSR2 are used):

  signal(SIG_THRES_UPPER, upper_threshold_triggered);
  signal(SIG_THRES_LOWER, lower_threshold_triggered);

Then, arrays of double (cells_thres) can be defined that contain values for
thesholds and arrays of uint8_t (cells_active) for stating which tresholds shall
fire in case they are passed, where 1 means fire or active and 0 means inactive.

  cells_thres[0] = 0.95;
  cells_thres[1] = 0.95;
  cells_active[0] = 1;
  cells_active[1] = 1;

  register_threshold(upper_threshold, cells_thres, cells_active, 2);

  cells_thres[0] = 0.05;
  cells_thres[1] = 0.05;
  cells_active[0] = 1;
  cells_active[1] = 1;

  register_threshold(lower_threshold, cells_thres, cells_active, 2);

The implementation of register_threshold can look like this for communicating
with sensord:

  static void register_threshold(enum threshold_type type, double *cells_thres,
  			       uint8_t *cells_active, size_t num)
  {
  	int sock;
  	ssize_t ret;
  	char buff[4096];
  	struct notfct_hdr *hdr;
  	struct sockaddr_un saddr;
  	socklen_t slen;
  
  	sock = socket(AF_UNIX, SOCK_STREAM, 0);
  	if (sock < 0)
  		panic("Cannot create socket!\n");
  
  	memset(&saddr, 0, sizeof(saddr));
  	saddr.sun_family = AF_UNIX;
  	strncpy(saddr.sun_path, SOCK_ADDR, sizeof(saddr.sun_path));
  
  	slen = sizeof(saddr);
  	ret = connect(sock, (struct sockaddr *) &saddr, slen);
  	if (ret < 0)
  		panic("Cannot connect to server!\n");
  
  	memset(buff, 0, sizeof(buff));
  	hdr = (struct notfct_hdr *) buff;
  	hdr->cmd = type == upper_threshold ?
  		   CMD_SET_UPPER_THRES : CMD_SET_LOWER_THRES;
  	hdr->proc = getpid();
  	strncpy(hdr->plugin_inst, PLUGIN_TO_TEST, sizeof(hdr->plugin_inst));
  	memcpy(buff + sizeof(*hdr), cells_thres, sizeof(*cells_thres) * num);
  	memcpy(buff + sizeof(*hdr) + sizeof(*cells_thres) * num, cells_active,
  	       sizeof(*cells_active) * num);
  
  	ret = write(sock, buff, sizeof(*hdr) + (sizeof(*cells_thres) +
  		    sizeof(*cells_active)) * num);
  	if (ret <= 0)
  		panic("Cannot write to server: %s\n", strerror(errno));
  
  	close(sock);
  }

Here, PLUGIN_TO_TEST must contain the plugin instance name e.g. "dummy-1".

A simple signal handler implementation looks like:

  static void lower_threshold_triggered(int num)
  {
  	struct shmnot_hdr *s = buffshared;
  
  	if (num != SIGUSR2)
  		return;
  
  	printf("ALERT: lower threshold triggered on %s (%lf, %d)!\n",
  	       s->plugin_inst, s->val, s->cell_num);
  }
